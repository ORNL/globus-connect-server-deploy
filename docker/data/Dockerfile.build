# syntax=docker/dockerfile:1.3-labs

################################################################################
# We build the target image in 2 phases:
#
# - The first stage will create a root of the target distro using the base
#   image's commands. This results in a root that contains the yum/rpm commands
#   of the target distro but with a rpm database in the format used by the base
#   distro.
# - The third stage will copy the root to / to create the final image.
#
# We'll want to do this twice if the BASE_IMAGE is a different major number than
# the target image because the yum/rpm database format changes between releases
# so we'll want the final image to have been built by that distro's tools.
################################################################################

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as stage_build_root

ARG YUM_OPTIONS
ARG RELEASE_PKG

ARG ROOT=/ROOT
ARG YUM_CONF_DIR=/yum
ARG YUM_SOURCE_DIR=data/yum/

# Copy in our yum configuration. Whether or not they are used in this stage is
# up to the caller by setting YUM_OPTIONS.
COPY ${YUM_SOURCE_DIR} ${YUM_CONF_DIR}
RUN <<EOF
set -e
# Fix up the yum configured paths.
sed -i "s,%YUM_CONF_DIR%,${YUM_CONF_DIR},g" ${YUM_CONF_DIR}/yum.conf
sed -i "s,%YUM_CONF_DIR%,${YUM_CONF_DIR},g" ${YUM_CONF_DIR}/yum.repos.d/*
mkdir -p ${ROOT}/var/lib/rpm
rpm --root ${ROOT} --initdb

yum -y ${YUM_OPTIONS} --installroot ${ROOT} install ${RELEASE_PKG} yum
EOF

FROM scratch

ARG ROOT=/ROOT
COPY --from=stage_build_root ${ROOT} /
